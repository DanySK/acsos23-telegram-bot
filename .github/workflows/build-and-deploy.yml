name: CI/CD Process
on:
  workflow_call:
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        os: [ windows-2022, macos-12, ubuntu-22.04 ]
    runs-on: ${{ matrix.os }}
    concurrency:
      group: build-${{ github.workflow }}-${{ matrix.os }}-${{ github.event.number || github.ref }}
      cancel-in-progress: true
    steps:
      - name: Checkout
        uses: DanySK/action-checkout@0.2.13
      - uses: DanySK/build-check-deploy-gradle-action@2.2.9
        with:
          should-run-codecov: ${{ runner.os == 'Linux' }}
          should-deploy: false
  containerize:
    runs-on: ubuntu-22.04
    concurrency:
      group: main-container-${{ github.workflow }}-${{ github.event.number || github.ref }}
      cancel-in-progress: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.0
      - name: Build the container
        run: docker build -t danysk/acsos23-telegram-bot .
  autoupdate-container:
    runs-on: ubuntu-22.04
    concurrency:
      group: autoupdate-container-${{ github.workflow }}-${{ github.event.number || github.ref }}
      cancel-in-progress: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.0
      - name: Build the container
        run: docker build -t danysk/acsos23-telegram-bot-autoupdate autoupdate
  release:
    permissions:
      contents: write
    concurrency:
      # Only one release job at a time. Strictly sequential.
      group: release-${{ github.workflow }}-${{ github.event.number || github.ref }}
    needs:
      - autoupdate-container
      - build
      - containerize
    runs-on: ubuntu-latest
    if: >-
      !github.event.repository.fork
      && (
        github.event_name != 'pull_request'
        || github.event.pull_request.head.repo.full_name == github.repository
      )
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.0
        with:
          token: ${{ github.token }}
      - name: Find the version of Node from package.json
        id: node-version
        run: echo "version=$(jq -r .engines.node package.json)" >> $GITHUB_OUTPUT
      - name: Install Node
        uses: actions/setup-node@v3.8.1
        with:
          node-version: ${{ steps.node-version.outputs.version }}
      - run: npm install
      - run: npx semantic-release
        env:
          GITHUB_TOKEN: ${{ github.token }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  success:
    runs-on: ubuntu-22.04
    needs:
      - release
      - build
    if: >-
      always() && (
        contains(join(needs.*.result, ','), 'failure')
        || !contains(join(needs.*.result, ','), 'cancelled')
      )
    steps:
      - name: Verify that there were no failures
        run: ${{ !contains(join(needs.*.result, ','), 'failure') }}
